<CascadingValue Value="this">
	<div class="accordion" id="@BlazuorAccordionId">
		@ChildContent
	</div>
</CascadingValue>


@code {
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public bool AllowSingleShow { get; set; } = true;

	[Parameter]
	public EventCallback<BlazuorAccordionItem> ItemClick { get; set; }

	private string BlazuorAccordionId { get; set; } = "BlazuorAccordion-" + Guid.NewGuid().ToString();

	private List<BlazuorAccordionItem> BlazuorAccordionItems { get; set; } = [];

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender )
		{
			for (int i = 0; i < BlazuorAccordionItems.Count; i++)
			{
				BlazuorAccordionItems[i].BlazuorAccordionId = BlazuorAccordionId;
				BlazuorAccordionItems[i].OnClickCallback += OnItemClick;
			}
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task OnItemClick(BlazuorAccordionItem Item)
	{
		if (AllowSingleShow)
		{
			if (Item.IsShow)
			{
				for (int i = 0; i < BlazuorAccordionItems.Count; i++)
				{
					if (BlazuorAccordionItems[i] != Item)
					{
						await BlazuorAccordionItems[i].SetIsShow(false);
					}
				}
			}
		}
		
		await ItemClick.InvokeAsync(Item);
	}

	internal void RegisterBlazuorAccordionItem(BlazuorAccordionItem Item)
	{
		if (!BlazuorAccordionItems.Contains(Item))
		{
			BlazuorAccordionItems.Add(Item);
		}
	}
}